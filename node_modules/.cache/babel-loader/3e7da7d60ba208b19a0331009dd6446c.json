{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\GitHub\\\\whiteEx\\\\src\\\\components\\\\BlockGet\\\\BlockGet.jsx\";\nimport css from './BlockGet.module.css';\nimport get_arrow from '../../images/get_arrow.png';\nimport USD from '../../images/USD.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cryptoCurrencies = [{\n  type: 'Bitcoin',\n  value: 'Bitcoin',\n  img: require('../../images/Bitcoin.png')\n}, {\n  type: 'Ethereum',\n  value: 'Ethereum',\n  img: require('../../images/Ethereum.png')\n}, {\n  type: 'USDT TRC20',\n  value: 'USDT TRC20',\n  img: require('../../images/USDT.png')\n}, {\n  type: 'USDT ERC20',\n  value: 'USDT ERC20',\n  img: require('../../images/USDT.png')\n}];\nexport const BlockGet = _ref => {\n  let {\n    key,\n    value,\n    img,\n    onChangeCurrency,\n    currency\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [' ', /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.get__currency,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: css.crypto__thumb,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: css.title,\n          children: [\"\\u041F\\u041E\\u041B\\u0423\\u0427\\u0410\\u0415\\u0422\\u0415:\", /*#__PURE__*/_jsxDEV(\"img\", {\n            src: get_arrow,\n            width: \"24\",\n            height: \"28\",\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: css.crypto__currencies__list\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), cryptoCurrencies.map(_ref2 => {\n      let {\n        key,\n        value,\n        img\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => onChangeCurrency(value),\n        className: value === currency ? css.active : {},\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: css.cryptocurrency__type,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: css.currency__img,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: img,\n              width: \"36\",\n              height: \"36\",\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), value]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true);\n};\n_c = BlockGet;\nexport default BlockGet;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlockGet\");","map":{"version":3,"sources":["C:/Users/user/Documents/GitHub/whiteEx/src/components/BlockGet/BlockGet.jsx"],"names":["css","get_arrow","USD","cryptoCurrencies","type","value","img","require","BlockGet","key","onChangeCurrency","currency","get__currency","crypto__thumb","title","crypto__currencies__list","map","active","cryptocurrency__type","currency__img"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,uBAAhB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,GAAP,MAAgB,sBAAhB;;;AAEA,MAAMC,gBAAgB,GAAG,CACvB;AACEC,EAAAA,IAAI,EAAE,SADR;AAEEC,EAAAA,KAAK,EAAE,SAFT;AAGEC,EAAAA,GAAG,EAAEC,OAAO,CAAC,0BAAD;AAHd,CADuB,EAMvB;AACEH,EAAAA,IAAI,EAAE,UADR;AAEEC,EAAAA,KAAK,EAAE,UAFT;AAGEC,EAAAA,GAAG,EAAEC,OAAO,CAAC,2BAAD;AAHd,CANuB,EAWvB;AACEH,EAAAA,IAAI,EAAE,YADR;AAEEC,EAAAA,KAAK,EAAE,YAFT;AAGEC,EAAAA,GAAG,EAAEC,OAAO,CAAC,uBAAD;AAHd,CAXuB,EAgBvB;AACEH,EAAAA,IAAI,EAAE,YADR;AAEEC,EAAAA,KAAK,EAAE,YAFT;AAGEC,EAAAA,GAAG,EAAEC,OAAO,CAAC,uBAAD;AAHd,CAhBuB,CAAzB;AAuBA,OAAO,MAAMC,QAAQ,GAAG,QAAqD;AAAA,MAApD;AAAEC,IAAAA,GAAF;AAAOJ,IAAAA,KAAP;AAAcC,IAAAA,GAAd;AAAmBI,IAAAA,gBAAnB;AAAqCC,IAAAA;AAArC,GAAoD;AAC3E,sBACE;AAAA,eACG,GADH,eAEE;AAAK,MAAA,SAAS,EAAEX,GAAG,CAACY,aAApB;AAAA,6BACE;AAAK,QAAA,SAAS,EAAEZ,GAAG,CAACa,aAApB;AAAA,gCACE;AAAK,UAAA,SAAS,EAAEb,GAAG,CAACc,KAApB;AAAA,6FAEE;AAAK,YAAA,GAAG,EAAEb,SAAV;AAAqB,YAAA,KAAK,EAAC,IAA3B;AAAgC,YAAA,MAAM,EAAC,IAAvC;AAA4C,YAAA,GAAG,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE;AAAI,UAAA,SAAS,EAAED,GAAG,CAACe;AAAnB;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,EAcGZ,gBAAgB,CAACa,GAAjB,CAAqB;AAAA,UAAC;AAAEP,QAAAA,GAAF;AAAOJ,QAAAA,KAAP;AAAcC,QAAAA;AAAd,OAAD;AAAA,0BACpB;AAEE,QAAA,OAAO,EAAE,MAAMI,gBAAgB,CAACL,KAAD,CAFjC;AAGE,QAAA,SAAS,EAAEA,KAAK,KAAKM,QAAV,GAAqBX,GAAG,CAACiB,MAAzB,GAAkC,EAH/C;AAAA,+BAKE;AAAG,UAAA,SAAS,EAAEjB,GAAG,CAACkB,oBAAlB;AAAA,kCACE;AAAM,YAAA,SAAS,EAAElB,GAAG,CAACmB,aAArB;AAAA,mCACE;AAAK,cAAA,GAAG,EAAEb,GAAV;AAAe,cAAA,KAAK,EAAC,IAArB;AAA0B,cAAA,MAAM,EAAC,IAAjC;AAAsC,cAAA,GAAG,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,EAIGD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AALF,SACOA,KADP;AAAA;AAAA;AAAA;AAAA,cADoB;AAAA,KAArB,CAdH;AAAA,kBADF;AA+BD,CAhCM;KAAMG,Q;AAiCb,eAAeA,QAAf","sourcesContent":["import css from './BlockGet.module.css';\nimport get_arrow from '../../images/get_arrow.png';\nimport USD from '../../images/USD.png';\n\nconst cryptoCurrencies = [\n  {\n    type: 'Bitcoin',\n    value: 'Bitcoin',\n    img: require('../../images/Bitcoin.png'),\n  },\n  {\n    type: 'Ethereum',\n    value: 'Ethereum',\n    img: require('../../images/Ethereum.png'),\n  },\n  {\n    type: 'USDT TRC20',\n    value: 'USDT TRC20',\n    img: require('../../images/USDT.png'),\n  },\n  {\n    type: 'USDT ERC20',\n    value: 'USDT ERC20',\n    img: require('../../images/USDT.png'),\n  },\n];\n\nexport const BlockGet = ({ key, value, img, onChangeCurrency, currency }) => {\n  return (\n    <>\n      {' '}\n      <div className={css.get__currency}>\n        <div className={css.crypto__thumb}>\n          <div className={css.title}>\n            ПОЛУЧАЕТЕ:\n            <img src={get_arrow} width=\"24\" height=\"28\" alt=\"\" />\n          </div>\n\n          {/* CONDITION */}\n\n          <ul className={css.crypto__currencies__list}></ul>\n        </div>\n      </div>\n      {cryptoCurrencies.map(({ key, value, img }) => (\n        <li\n          key={value}\n          onClick={() => onChangeCurrency(value)}\n          className={value === currency ? css.active : {}}\n        >\n          <p className={css.cryptocurrency__type}>\n            <span className={css.currency__img}>\n              <img src={img} width=\"36\" height=\"36\" alt=\"\" />\n            </span>\n            {value}\n          </p>\n        </li>\n      ))}\n    </>\n  );\n};\nexport default BlockGet;\n"]},"metadata":{},"sourceType":"module"}